package kr.co.uclick.controller;

import javax.lang.model.element.Name;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

import kr.co.uclick.entity.User;
import kr.co.uclick.service.UserService;

@Controller
public class UserController {

	private static final Logger logger = LoggerFactory.getLogger(UserController.class);

	@Autowired
	private UserService userService; //sampleService를 자동으로 연결해준다.
	//GetMapping이란 RequestMapping(method=requestMethod.get)의 바로가기 형태이다.
	@GetMapping(value = "Userlist.html")//list.html을 호출하였을 때(list=전체 사용자 리스트를 구현하려는 페이지)
	public String Userlist(Model model) {
		model.addAttribute("users", userService.findAll());//sampleService.findAll()에 users라는 이름을 부여하여 사용한다.
		return "Userlist";//list값을 돌려준다.
	}
	
	@GetMapping(value = "newUser.html")//newForm.html을 호출하면(아마도 create 테이블용 페이지)
	public String newUser(Model model) {
			return "newUser";//newForm을 돌려준다.
	}
	
	@GetMapping(value = "Userinsert.html")//newForm.html을 호출하면(아마도 create 테이블용 페이지)
	public String Userinsert(User user,Model model) {
			userService.save(user);
			return "Userinsert";//newForm을 돌려준다.
	}

	
	@GetMapping(value = "Userupdate.html")//save.html을 호출하면 (데이터 insert 페이지)
	public String save(Long id, Model model) {
		model.addAttribute("user",userService.findUsersById(id));
		return "Userupdate";
	}
	
	@PostMapping(value = "UserupdateDB.html")//save.html을 호출하면 (데이터 insert 페이지)
	public String saveDB(User user, Model model) {
		System.out.println(user.getId());
		System.out.println(user.getName());
		System.out.println(user.getNumber());
		userService.save(user);
		return "UserupdateDB";
	}

	@GetMapping(value = "Userdelete.html")//delete.html을 호출하면 (데이터 delete 페이지)
	public String delete(Long id, Model model) {
		userService.delete(id);
		return "redirect:Userlist.html";
	}
		
}
